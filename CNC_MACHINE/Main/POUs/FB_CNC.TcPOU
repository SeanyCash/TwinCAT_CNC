<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="FB_CNC" Id="{aa8e508b-b3d9-4f69-bd41-818be025bca8}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_CNC IMPLEMENTS I_HMI;
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	
    // Event Logger Instances	
    fbEventLogger	: FB_TcEventLogger;
    fbAlarm			: FB_TcAlarm;
    fbMessage		: FB_TcMessage;
    bSendEvent    : BOOL;
    bInitEvent    : BOOL;
   // Motion Function Instances 
	Y_Motion		: FB_MotionFunctions;
	Y2_Motion 		: FB_MotionFunctions;
	X_Motion		: FB_MotionFunctions;
	Z_Motion		: FB_MotionFunctions;
    fbNCI           : FB_NCI;
    fbSpindle       : FB_SpindleFunctions;
    
    //eHomeYSeq       : E_HomeY;
    eHomeYSeq :(INIT_HOME,GEAR_IN,POWER_ON,CHECK_HOMED,HOME_Y1,Y1_HOMED,HOME_Y2,Y2_HOMED,RE_GEAR,HOME_COMPLETE);
	
	Y_MC_IN			: ST_Motion_Inputs;
	Y2_MC_IN		: ST_Motion_Inputs;
	X_MC_IN			: ST_Motion_Inputs;
	Z_MC_IN			: ST_Motion_Inputs;
	
	Y_MC_OUT		: ST_Motion_Outputs;
	Y2_MC_OUT		: ST_Motion_Outputs;
	X_MC_OUT		: ST_Motion_Outputs;
	Z_MC_OUT		: ST_Motion_Outputs;
	
	
	Y_Ref	        : AXIS_REF;
	Y2_Ref	        : AXIS_REF;
	X_Ref	        : AXIS_REF;
	Z_Ref	        : AXIS_REF;
	
	
	i_bYHomingSwitch		AT %I* : BOOL;
	i_bY2HomingSwitch		AT %I* : BOOL;
    i_bYLimitSwitch			AT %I* : BOOL;
	i_bXHomingSwitch		AT %I* : BOOL;
    i_bXLimitSwitch			AT %I* : BOOL;
	i_bZHomingSwitch		AT %I* : BOOL;
    
   // Homing / Limit Proxes 
	
	bYHomingSwitch		: BOOL;
	bY2HomingSwitch		: BOOL;
	bYLimitSwitch		: BOOL;
	bYNegativeLimit     : BOOL;
    bY2NegativeLimit    : BOOL;
	bXHomingSwitch		: BOOL;
	bZHomingSwitch		: BOOL;
	bXLimitSwitch		: BOOL; 
    bXNegativeLimit     : BOOL;
    bZPositiveLimit     : BOOL;
    
    // Limit Switch Stop Triggers (use to one shot a stop command when axis limit switch is triggered)
    bYStopTrigger       : R_TRIG;
    bXStopTrigger       : R_TRIG;
    bZStopTrigger       : R_TRIG;
	
	
	bHomeY		    : BOOL;
	bHomeY2		    : BOOL;
	bHomeX		    : BOOL;
	bHomeZ		    : BOOL;
	eHomingMode		: MC_HomingMode;
    bGearInTrigger  : BOOL;
    rGearInTrigger  : R_TRIG;
    rtrigAxisNotGeared  : R_TRIG;
	bAllAxesReady	: BOOL;
    bAllAxesHomed   : BOOL;
    
    trigProgramCall : R_TRIG;
    trigAxisEnable : R_TRIG;

	
// Program Call Variables	
	
	nHomeAllSeq	: INT;
	nHomeYSeq	: INT;
	nHomeXSeq	: INT;
	nHomeZSeq	: INT;
    
    bYHomeDone  : BOOL;
    bXHomeDone  : BOOL;
    bZHomeDone  : BOOL;
	
	ProgramCall	: E_Programs;
    sCurrentProgram : STRING;
    
    
    
	bExecuteNCProgram:	BOOL	:= FALSE;
    bExecuteZeroShift:  BOOL    := FALSE;
    sPrgName                : STRING[255];

    
	

END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF bInitEvent THEN
    bInitEvent := FALSE; 
    fbMessage.CreateEx(TC_Events.CNC_Events.X_Home_Start,0); 
END_IF
IF bSendEvent THEN 
    bSendEvent := FALSE; 
    fbMessage.Send(0); 
END_IF



// Trigger Axis Gearing

rtrigAxisNotGeared(CLK := Y_MC_OUT.bPowerStatus AND NOT Y_MC_OUT.bGearInDone);

rGearInTrigger(CLK:= bGearInTrigger);

(*IF ProgramCall <> (eHomeX OR eHomeAll) THEN
bGearInExecute:= rGearInTrigger.Q;
END_IF*)

(*IF rtrigAxisNotGeared.Q THEN
    bGearInTrigger := TRUE;
ELSE 
    bGearInTrigger := FALSE;
END_IF*)

// Rising triggers for HMI control. Having issues calling directly in the Methods
trigAxisEnable(CLK := stHMI_In.bAxisEnable);


// Call Axis Status Action

Y_Ref.ReadStatus();
Y2_Ref.ReadStatus();
X_Ref.ReadStatus();
Z_Ref.ReadStatus();

// Call HMI Interface Methods

M_HMI_In();
M_HMI_Out();

// Call Limit Switch Logic

M_LimitSwitchLogic();

// Motion Calls

Y_Motion( 
			Ref:= Y_Ref,
            bGearingEnabled := TRUE,
            SlaveRef:= Y2_Ref,
		  	Motion_In := Y_MC_IN,
		  	Motion_Out => Y_MC_OUT,
            bJogEnable:= stHMI_In.bJogEnable AND Y_Ref.NcToPlc.CoupleState = 1,
            eJogMode:= stHMI_In.eJogMode,
			fJogPosition:= stHMI_In.fJogPosition,
			fJogVelocity:= stHMI_In.fJogVelocity,
            bJogPositive := stHMI_In.bYJogPositive,
            bJogNegative := stHMI_In.bYJogNegative,
            bStopAxis := bStopExecute OR bYStopTrigger.Q,
            bResetAxis := bAxisReset,
			bHomingInput := bYHomingSwitch,
			eHomingMode := eHomingMode,
			bPositiveLimitSwitch := bYLimitSwitch,
            bNegativeLimitSwitch := bYNegativeLimit OR bY2NegativeLimit,
			bHomeExecute := bHomeY,
										);
                                        

							
Y2_Motion( 
			Ref:= Y2_Ref,
            bGearingEnabled := TRUE,
            SlaveRef:= Y2_Ref,
		  	Motion_In := Y2_MC_IN,
		  	Motion_Out => Y2_MC_OUT,
            bJogEnable:= stHMI_In.bJogEnable AND Y2_Ref.NcToPlc.CoupleState = 3,
            eJogMode:= stHMI_In.eJogMode,
			fJogPosition:= stHMI_In.fJogPosition,
			fJogVelocity:= stHMI_In.fJogVelocity,
            bJogPositive := stHMI_In.bYJogPositive,
            bJogNegative := stHMI_In.bYJogNegative,
            bStopAxis := bStopExecute OR bYStopTrigger.Q,
            bResetAxis := bAxisReset,
			bHomingInput := bY2HomingSwitch,
			eHomingMode := eHomingMode,
			bPositiveLimitSwitch := bYLimitSwitch,
            bNegativeLimitSwitch := bY2NegativeLimit OR bYNegativeLimit,
			bHomeExecute := bHomeY2
										);
						
X_Motion( 
			Ref:= X_Ref,
            bGearingEnabled := FALSE,
            SlaveRef:= X_Ref,
		  	Motion_In := X_MC_IN,
		  	Motion_Out => X_MC_OUT,
            bJogEnable:= stHMI_In.bJogEnable,
            eJogMode:= stHMI_In.eJogMode,
			fJogPosition:= stHMI_In.fJogPosition,
			fJogVelocity:= stHMI_In.fJogVelocity,
            bJogPositive := stHMI_In.bXJogPositive,
            bJogNegative := stHMI_In.bXJogNegative,
            bStopAxis := bStopExecute OR bXStopTrigger.Q,
            bResetAxis := bAxisReset,
			bHomingInput := bXHomingSwitch,
			eHomingMode := eHomingMode,
			bPositiveLimitSwitch := bXLimitSwitch,
            bNegativeLimitSwitch := bXNegativeLimit,
			bHomeExecute := bHomeX
										);
							
Z_Motion( 
			Ref:= Z_Ref,
            bGearingEnabled := FALSE,
            SlaveRef:= Z_Ref,
		  	Motion_In := Z_MC_IN,
		  	Motion_Out => Z_MC_OUT ,
            bJogEnable:= stHMI_In.bJogEnable,
            eJogMode:= stHMI_In.eJogMode,
			fJogPosition:= stHMI_In.fJogPosition,
			fJogVelocity:= stHMI_In.fJogVelocity,
            bJogPositive := stHMI_In.bZJogPositive,
            bJogNegative := stHMI_In.bZJogNegative,
            bStopAxis := bStopExecute OR bZStopTrigger.Q,
            bResetAxis := bAxisReset,
			bHomingInput := bZHomingSwitch,
			eHomingMode := eHomingMode,
            bPositiveLimitSwitch := bZPositiveLimit,
            bNegativeLimitSwitch := FALSE,
			bHomeExecute := bHomeZ
										);



                                        
fbNCI(
	        bExecute:= bExecuteNCProgram,
            bExecuteZeroShift:= bExecuteZeroShift,
            bStop:= bStopExecute,
            sPrgName := sPrgName, 
	        bBusy=> , 
	        bError=> , 
	        bDone=> , 
	        stX:=X_Ref, 
	        stY:=Y_Ref, 
	        stZ:=Z_Ref, 
            sLoadedProgram=>sCurrentProgram);
            
fbSpindle();

// All Axes Ready Bit

bAllAxesReady:= Y_MC_OUT.bPowerStatus AND Y2_MC_OUT.bPowerStatus AND X_MC_OUT.bPowerStatus AND Z_MC_OUT.bPowerStatus;
bAllAxesHomed:= Y_Ref.Status.Homed AND Y2_Ref.Status.Homed AND X_Ref.Status.Homed AND Z_Ref.Status.Homed;

// Method Calls

M_ProgramLoader();
M_Inputs();
M_Outputs();]]></ST>
    </Implementation>
    <Method Name="M_HMI_In" Id="{d9c64941-408b-44a2-8a91-175c813c4e4d}">
      <Declaration><![CDATA[METHOD M_HMI_In : BOOL

VAR



END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[

// Select Homing Various Programs

trigProgramCall(CLK := stHMI_In.bTriggerProgramCall);
IF trigProgramCall.Q THEN
    
    ProgramCall := stHMI_In.ProgramCall;    

END_IF

// Trigger axis enable button toggle but don't allow it to overwrite the program controlled axis enable

IF trigAxisEnable.Q THEN
    
    IF NOT bAxisEnable THEN
    
    bAxisEnable := TRUE;

    ELSIF bAxisEnable THEN

    bAxisEnable := FALSE;

    END_IF    

END_IF

// NCI Functions

bExecuteNCProgram := stHMI_In.bStart;
bStopExecute := stHMI_In.bStop;
bExecuteZeroShift := stHMI_In.bExecuteZeroShift;

// Axis Reset

bAxisReset := stHMI_In.bReset;

// Axis Jogging    ]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_HMI_Out" Id="{579ae688-d5bb-4d46-9cff-7ebda2f9644e}">
      <Declaration><![CDATA[METHOD M_HMI_Out : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Limit and Homing Switch Mapping

stHMI_Out.bY1HomeSwitch := bYHomingSwitch;	
stHMI_Out.bY2HomeSwitch := bY2HomingSwitch;
stHMI_Out.bYLimitSwitch := bYLimitSwitch;	
stHMI_Out.bXHomeSwitch := bXHomingSwitch;
stHMI_Out.bXLimitSwitch := bXLimitSwitch;	
stHMI_Out.bZHomeSwitch  := bZHomingSwitch;	


// Pass Axis Ref info to HMI

stHMI_Out.stYRef  := Y_Ref;
stHMI_Out.stY2Ref := Y2_Ref;
stHMI_Out.stXRef  := X_Ref;
stHMI_Out.stZRef  := Z_Ref;

stHMI_Out.fActPosX:= LREAL_TO_REAL(X_Ref.NcToPlc.ActPos);
stHMI_Out.fActPosY:= LREAL_TO_REAL(Y_Ref.NcToPlc.ActPos);
stHMI_Out.fActPosY2:= LREAL_TO_REAL(Y2_Ref.NcToPlc.ActPos);
stHMI_Out.fActPosZ:= LREAL_TO_REAL(Z_Ref.NcToPlc.ActPos);

stHMI_Out.sCurrentProgramSelected := sCurrentProgram;







]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Inputs" Id="{44930261-f7b3-46c2-ba50-0ddd8b114d05}">
      <Declaration><![CDATA[METHOD M_Inputs : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Homing Switch Inputs

bYHomingSwitch	:= i_bYHomingSwitch;	
bY2HomingSwitch	:= i_bY2HomingSwitch;	
bXHomingSwitch	:= i_bXHomingSwitch;	
bZHomingSwitch	:= i_bZHomingSwitch;

// Limit Switch Inputs

bYLimitSwitch	:= i_bYLimitSwitch;
bXLimitSwitch	:= i_bXLimitSwitch;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_LimitSwitchLogic" Id="{d221ad2e-2e3c-403f-a0d1-ca7284c8dd6e}">
      <Declaration><![CDATA[METHOD M_LimitSwitchLogic : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Limit Switch Logic // Ignore "Home sensors" while running home routines. otherwise use Homing sensors to trigger a limit switch stop

IF ProgramCall <> eNull THEN    
    bYNegativeLimit  := FALSE;
    bY2NegativeLimit := FALSE;
    bXNegativeLimit  := FALSE;
    bZPositiveLimit  := FALSE;
    bYStopTrigger(CLK:= bYLimitSwitch);
    bXStopTrigger(CLK:=bXLimitSwitch);
    bZStopTrigger(CLK:= FALSE);    
ELSE
    bYNegativeLimit := bYHomingSwitch;
    bY2NegativeLimit := bY2HomingSwitch;
    bXNegativeLimit := bXHomingSwitch;
    bZPositiveLimit := bZHomingSwitch;
    //Stop Triggers
    bYStopTrigger(CLK:=bYNegativeLimit OR bY2NegativeLimit OR bYLimitSwitch);
    bXStopTrigger(CLK:=bXNegativeLimit OR bXLimitSwitch);
    bZStopTrigger(CLK:=bZPositiveLimit);    
END_IF

// Limit Switch Rising Edge trigger to trigger MC_Stop when first active]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Outputs" Id="{bfb1dda8-5611-458d-bc52-800eff2f8798}">
      <Declaration><![CDATA[METHOD M_Outputs : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_PRG_HomeAll" Id="{dab3d8ef-3b5b-4130-bf86-a872d94b2fd9}">
      <Declaration><![CDATA[METHOD M_PRG_HomeAll : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Execute homing on all axes simultaneously
// If there is an error during any Axis homing, continue with all other axes but return and error message of some sort i.e "X axis failed to Home" or something similar

CASE nHomeAllSeq OF
		 		
0:
   eHomingMode := MC_DefaultHoming;
   M_PRG_HomeAll := FALSE;
   bYHomeDone := M_PRG_HomeY();
   IF bYHomeDone THEN
     nHomeAllSeq:=10;
   END_IF
10:
   bXHomeDone := M_PRG_HomeX();
   IF bXHomeDone THEN
       nHomeAllSeq:=20;
   END_IF
20:
   bZHomeDone := M_PRG_HomeZ();
   IF bZHomeDone THEN
       nHomeAllSeq:=30;
   END_IF
30:
    M_PRG_HomeAll := bYHomeDone AND bXHomeDone AND bZHomeDone;  
	
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_PRG_HomeX" Id="{0559bf4f-f4eb-40eb-a1a9-aef1d5d76984}">
      <Declaration><![CDATA[METHOD M_PRG_HomeX : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[


CASE nHomeXSeq OF
		 		

	0:
		fbMessage.CreateEx(TC_Events.CNC_Events.X_Home_Start, 0); // "X Homing Started"
	    eHomingMode := MC_DefaultHoming;
        M_PRG_HomeX := FALSE;
		//bProgramDone := FALSE;
		bAxisEnable:=TRUE;
		nHomeXSeq :=10;	
	
	10:
	
		IF X_MC_OUT.bPowerStatus THEN
			
			bHomeX := TRUE;
			nHomeXSeq:=20;
		
		ELSE

			nHomeXSeq:=0;		
		
		END_IF
	
	20:
		IF X_MC_OUT.bAxisHomed THEN
			
			bHomeX:= FALSE;
			nHomeXSeq:=30;
		
		END_IF
		
	30:
		
		//bAxisEnable:=FALSE;
		nHomeXSeq:=0;
		//bProgramDone := TRUE;
        M_PRG_HomeX := TRUE;



END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_PRG_HomeY" Id="{1d12177f-1165-4fe4-893e-75362f34ca0e}">
      <Declaration><![CDATA[METHOD M_PRG_HomeY : BOOL
VAR_INPUT
END_VAR

VAR
    


END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[


CASE eHomeYSeq OF
		 		

INIT_HOME:
		fbMessage.CreateEx(TC_Events.CNC_Events.Y_Home_Start, 0);	// "Y Homing Started"
        eHomingMode := MC_DefaultHoming;
        M_PRG_HomeY:= FALSE;
		//bProgramDone := FALSE;
		bAxisEnable:=TRUE;
        bGearOutExecute:=FALSE;
        bGearInExecute:=FALSE;
        eHomeYSeq:=GEAR_IN;
        
GEAR_IN:        

        bGearInExecute := TRUE;
        IF Y_Ref.NcToPlc.CoupleState = 1 AND Y2_Ref.NcToPlc.CoupleState = 3 THEN     
            eHomeYSeq :=POWER_ON;
		END_IF
			
	
POWER_ON:

	    // Home Both Axes Together
		IF Y_MC_OUT.bPowerStatus THEN
			
			bHomeY := TRUE;
			eHomeYSeq:=CHECK_HOMED;
		
		ELSE

			eHomeYSeq:=INIT_HOME;		
		
		END_IF
	
CHECK_HOMED:

		IF Y_MC_OUT.bAxisHomed AND Y_Ref.Status.Homed THEN
			
			bHomeY:= FALSE;
			eHomeYSeq:=HOME_Y1;
		
		END_IF
        
HOME_Y1:
        // Decouple Axes for individual Homing
        
        //Y1 Homing
        bGearInExecute := FALSE;
        bGearOutExecute:= TRUE;
        IF Y_MC_OUT.bPowerStatus AND Y_Ref.NcToPlc.CoupleState = 0 THEN
			bHomeY := TRUE;
			eHomeYSeq:=Y1_HOMED;
        ELSE
            bAxisEnable:=TRUE;
            bAxisReset:=TRUE;
            eHomeYSeq:=HOME_Y1;
        END_IF
        
Y1_HOMED:
     
        IF Y_MC_OUT.bAxisHomed AND Y_Ref.Status.Homed THEN
			
			bHomeY:= FALSE;
			eHomeYSeq:=HOME_Y2;
		
		END_IF

HOME_Y2:
        // Y2 Homing
       IF Y2_MC_OUT.bPowerStatus AND Y2_Ref.NcToPlc.CoupleState = 0 THEN
			
			bHomeY2 := TRUE;
			eHomeYSeq:=Y2_HOMED;
        ELSE
            bAxisEnable:=TRUE;
            bAxisReset:=TRUE;
            eHomeYSeq:=HOME_Y2;
        END_IF
        
Y2_HOMED:
      
        IF Y2_MC_OUT.bAxisHomed AND Y2_Ref.Status.Homed THEN
			
			bHomeY2:= FALSE;
			eHomeYSeq:= RE_GEAR;
		
		END_IF
        

RE_GEAR:
        bGearOutExecute:=FALSE;
        bGearInExecute:=TRUE;
        IF Y_Ref.NcToPlc.CoupleState = 1 AND Y2_Ref.NcToPlc.CoupleState = 3 THEN
            eHomeYSeq:=END;      
		END_IF
        
        
HOME_COMPLETE:
		
		//bAxisEnable:=FALSE;
		eHomeYSeq:=INIT_HOME;
		//bProgramDone := TRUE;
        M_PRG_HomeY:= TRUE;
        
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_PRG_HomeZ" Id="{a0db440c-428a-4bcc-967b-6a14556f0e37}">
      <Declaration><![CDATA[METHOD M_PRG_HomeZ : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[


CASE nHomeZSeq OF
		 		

	0:
		fbMessage.CreateEx(TC_Events.CNC_Events.Z_Home_Start, 0); // "Z Homing Started"
	    eHomingMode := MC_DefaultHoming;
        M_PRG_HomeZ := FALSE;
		//bProgramDone := FALSE;
		bAxisEnable:=TRUE;
		nHomeZSeq :=10;	
	
	10:
	
		IF Z_MC_OUT.bPowerStatus THEN
			
			bHomeZ := TRUE;
			nHomeZSeq:=20;
		
		ELSE

			nHomeZSeq:=0;		
		
		END_IF
	
	20:
		IF Z_MC_OUT.bAxisHomed THEN
			
			bHomeZ:= FALSE;
			nHomeZSeq:=30;
		
		END_IF
		
	30:
		
		//bAxisEnable:=FALSE;
		nHomeZSeq:=0;
		//bProgramDone := TRUE;
        M_PRG_HomeZ := TRUE;




END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_PRG_Null" Id="{95052e96-06a1-4162-a970-9a7ef220b3e3}">
      <Declaration><![CDATA[METHOD M_PRG_Null : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[nHomeAllSeq:=0;
eHomeYSeq:=INIT_HOME;
nHomeXSeq:=0;
nHomeZSeq:=0;
//bProgramDone:= FALSE;
bHomeX:=FALSE;
bHomeY:=FALSE;
bHomeY2:=FALSE;
bHomeZ:=FALSE;
//bAxisEnable:= FALSE;

/////////////////////////////////]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_ProgramLoader" Id="{89f9fb87-c1f3-4063-b9ac-059ba224bd26}">
      <Declaration><![CDATA[METHOD M_ProgramLoader : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF bProgramDone THEN
	
	ProgramCall := eNull;

END_IF


CASE ProgramCall OF	
	
	eNull:
	
        bProgramDone:=FALSE;
	    bProgramDone :=	M_PRG_Null();

	eHomeAll:
    
	    bProgramDone:=FALSE;
		bProgramDone := M_PRG_HomeAll();
	
	eHomeY:
	
		bProgramDone:=FALSE;
		bProgramDone := M_PRG_HomeY();
	
	eHomeX:
	
		bProgramDone:=FALSE;
		bProgramDone := M_PRG_HomeX();	
	
	eHomeZ:
	
		bProgramDone:=FALSE;
		bProgramDone := M_PRG_HomeZ();

END_CASE

]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_CNC">
      <LineId Id="13935" Count="139" />
      <LineId Id="14201" Count="0" />
      <LineId Id="14075" Count="7" />
      <LineId Id="14085" Count="0" />
      <LineId Id="14305" Count="1" />
      <LineId Id="14089" Count="9" />
      <LineId Id="680" Count="0" />
    </LineIds>
    <LineIds Name="FB_CNC.M_HMI_In">
      <LineId Id="5" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="24" Count="1" />
      <LineId Id="28" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="45" Count="1" />
      <LineId Id="40" Count="1" />
      <LineId Id="47" Count="1" />
      <LineId Id="42" Count="1" />
      <LineId Id="50" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="53" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="59" Count="1" />
      <LineId Id="58" Count="0" />
      <LineId Id="78" Count="0" />
      <LineId Id="69" Count="0" />
      <LineId Id="68" Count="0" />
      <LineId Id="71" Count="0" />
      <LineId Id="70" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="12" Count="0" />
    </LineIds>
    <LineIds Name="FB_CNC.M_HMI_Out">
      <LineId Id="11" Count="7" />
      <LineId Id="44" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="52" Count="2" />
      <LineId Id="59" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="60" Count="2" />
      <LineId Id="56" Count="0" />
      <LineId Id="32" Count="7" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="FB_CNC.M_Inputs">
      <LineId Id="9" Count="1" />
      <LineId Id="5" Count="3" />
      <LineId Id="12" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="15" Count="0" />
    </LineIds>
    <LineIds Name="FB_CNC.M_LimitSwitchLogic">
      <LineId Id="16" Count="1" />
      <LineId Id="6" Count="4" />
      <LineId Id="29" Count="1" />
      <LineId Id="28" Count="0" />
      <LineId Id="11" Count="4" />
      <LineId Id="21" Count="1" />
      <LineId Id="26" Count="1" />
      <LineId Id="5" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="18" Count="0" />
    </LineIds>
    <LineIds Name="FB_CNC.M_Outputs">
      <LineId Id="15" Count="0" />
    </LineIds>
    <LineIds Name="FB_CNC.M_PRG_HomeAll">
      <LineId Id="205" Count="5" />
      <LineId Id="232" Count="0" />
      <LineId Id="211" Count="17" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="FB_CNC.M_PRG_HomeX">
      <LineId Id="6" Count="5" />
      <LineId Id="45" Count="0" />
      <LineId Id="87" Count="0" />
      <LineId Id="83" Count="0" />
      <LineId Id="78" Count="0" />
      <LineId Id="46" Count="28" />
      <LineId Id="40" Count="0" />
      <LineId Id="79" Count="0" />
      <LineId Id="42" Count="2" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_CNC.M_PRG_HomeY">
      <LineId Id="6" Count="6" />
      <LineId Id="172" Count="0" />
      <LineId Id="146" Count="0" />
      <LineId Id="137" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="63" Count="0" />
      <LineId Id="161" Count="1" />
      <LineId Id="165" Count="1" />
      <LineId Id="163" Count="1" />
      <LineId Id="69" Count="0" />
      <LineId Id="152" Count="0" />
      <LineId Id="155" Count="0" />
      <LineId Id="154" Count="0" />
      <LineId Id="15" Count="2" />
      <LineId Id="138" Count="0" />
      <LineId Id="18" Count="1" />
      <LineId Id="45" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="55" Count="0" />
      <LineId Id="53" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="20" Count="1" />
      <LineId Id="139" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="60" Count="0" />
      <LineId Id="62" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="71" Count="2" />
      <LineId Id="110" Count="1" />
      <LineId Id="74" Count="0" />
      <LineId Id="89" Count="0" />
      <LineId Id="76" Count="0" />
      <LineId Id="78" Count="0" />
      <LineId Id="75" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="85" Count="0" />
      <LineId Id="88" Count="0" />
      <LineId Id="86" Count="1" />
      <LineId Id="101" Count="2" />
      <LineId Id="105" Count="4" />
      <LineId Id="104" Count="0" />
      <LineId Id="90" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="91" Count="0" />
      <LineId Id="93" Count="7" />
      <LineId Id="92" Count="0" />
      <LineId Id="112" Count="1" />
      <LineId Id="121" Count="0" />
      <LineId Id="116" Count="4" />
      <LineId Id="114" Count="1" />
      <LineId Id="122" Count="0" />
      <LineId Id="79" Count="0" />
      <LineId Id="125" Count="2" />
      <LineId Id="131" Count="0" />
      <LineId Id="129" Count="0" />
      <LineId Id="123" Count="1" />
      <LineId Id="81" Count="3" />
      <LineId Id="44" Count="0" />
      <LineId Id="145" Count="0" />
      <LineId Id="80" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_CNC.M_PRG_HomeZ">
      <LineId Id="6" Count="5" />
      <LineId Id="45" Count="0" />
      <LineId Id="87" Count="0" />
      <LineId Id="83" Count="0" />
      <LineId Id="78" Count="0" />
      <LineId Id="46" Count="28" />
      <LineId Id="40" Count="0" />
      <LineId Id="79" Count="0" />
      <LineId Id="41" Count="3" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_CNC.M_PRG_Null">
      <LineId Id="5" Count="2" />
      <LineId Id="9" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="24" Count="3" />
      <LineId Id="15" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="19" Count="0" />
    </LineIds>
    <LineIds Name="FB_CNC.M_ProgramLoader">
      <LineId Id="242" Count="0" />
      <LineId Id="200" Count="4" />
      <LineId Id="240" Count="0" />
      <LineId Id="205" Count="4" />
      <LineId Id="246" Count="0" />
      <LineId Id="210" Count="2" />
      <LineId Id="247" Count="0" />
      <LineId Id="213" Count="0" />
      <LineId Id="215" Count="18" />
      <LineId Id="48" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>