<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="FB_ModbusRTU_SerialComms" Id="{8f9234e5-e777-4ade-9863-a4ff4d22c154}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_ModbusRTU_SerialComms
VAR_INPUT
	nModbusStationAddress	: BYTE	:=1;
	//Read Variables
	bReadExecute			: BOOL;
	nReadQuantity			: WORD;
	nModbusReadDataAddress	: WORD;
	nModbusReadData    		: ARRAY [1..100] OF INT;
	//Write Variables
	bWriteExecute			: BOOL;
	nWriteQuantity			: WORD;
	nModbusWriteDataAddress	: WORD;
	nModbusWriteData    	: ARRAY [1..100] OF INT;
END_VAR
VAR_OUTPUT
	//Read Status
	bReadComplete		: BOOL;
	bReadFailed			: BOOL;
	//Write Status
	bWriteComplete		: BOOL;
	bWriteFailed		: BOOL;
END_VAR
VAR
	fbModbusMasterEL	: ModbusRtuMasterV2_KL6x22B;	// Beckhoff FB for communicating through Modbus RTU as a Master
	eReadState			: (INIT_READ,READ,READ_ERROR,FINISH_READ);
	eWriteState			: (INIT_WRITE,WRITE,WRITE_ERROR,FINISH_WRITE);
	//Read Variables
	bReadBusy			: BOOL;
	bReadError			: BOOL;
	eReadErrorID		: MODBUS_ERRORS;
	nNumReadBytes		: UINT;
	//Write Variables
	bWriteBusy			: BOOL;
	bWriteError			: BOOL;
	eWriteErrorID		: MODBUS_ERRORS;
	
	// Mode Variable (Add what mode we want to call, Read regs, write single reg, write coil, etc...)
	// eModbusFunction	: (WRITE_SINGLE_REG,READ_MULTIPLE_REGS,);
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// FB is used for Modbus RTU communication through a Serial Communication terminal (EL6021, etc...)

IF NOT bWriteExecute THEN
	bReadComplete := M_Read();
END_IF
IF bWriteExecute THEN
	bWriteComplete := M_WriteSingleRegister();
END_IF
M_Status();

(*
		fbModbusMasterEL.ReadRegs(
								UnitID:= 1, 
								Quantity:= 45, 
								MBAddr:= 0, 
								cbLength:= SIZEOF(nModbusReadBlk1), 
								pMemoryAddr:= ADR(nModbusReadBlk1), 
								Execute:= bReadExecute, 
								Timeout:= T#300MS, 
								Busy=> bReadBusy, 
								Error=> bReadError, 
								ErrorId=> eReadErrorID, 
								cbRead=> nCbRead);
		 IF tReadTimer.Q AND NOT bReadError THEN
		 bReadExecute:=FALSE;                       
		 eReadState:=FINISH;
		 END_IF 
    
	
	READ_SECOND_BLOCK:
		bReadExecute:=TRUE;
		bReadTimerExecute:=TRUE; 
		fbModbusMasterEL.ReadRegs(
								UnitID:= 1, 
								Quantity:= 59, 
								MBAddr:= 128, 
								cbLength:= SIZEOF(nModbusReadBlk2), 
								pMemoryAddr:= ADR(nModbusReadBlk2), 
								Execute:= bReadExecute, 
								Timeout:= T#300MS, 
								Busy=> bReadBusy, 
								Error=> bReadError, 
								ErrorId=> eReadErrorID, 
								cbRead=> nCbRead);
								
		 IF tReadTimer.Q AND NOT bReadError THEN                       
		 eReadVFDParamsSeq:=FINISH;
		 END_IF 

*)]]></ST>
    </Implementation>
    <Method Name="M_Read" Id="{de3443a0-3413-4377-8069-6633fd7a965d}">
      <Declaration><![CDATA[METHOD M_Read : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Read multiple Modbus Registers

CASE eReadState OF
			
	INIT_READ:
		IF bReadExecute THEN
			bReadError := FALSE;
			M_Read := FALSE;
			fbModbusMasterEL.ReadRegs(Execute:=FALSE);
			eReadState:=READ;
		END_IF
	
	READ:
		fbModbusMasterEL.ReadRegs(
								UnitID:= nModbusStationAddress, 
								Quantity:= nReadQuantity, 
								MBAddr:= nModbusReadDataAddress, 
								cbLength:= SIZEOF(nModbusReadData), 
								pMemoryAddr:= ADR(nModbusReadData), 
								Execute:= bReadExecute, 
								Timeout:= T#300MS, 
								Busy=> bReadBusy, 
								Error=> bReadError, 
								ErrorId=> eReadErrorID, 
								cbRead=> nNumReadBytes);
		 IF bReadBusy AND NOT bReadError THEN
		 	IF NOT bReadBusy THEN                      
		 		eReadState:=FINISH_READ;
			END_IF
		 ELSIF bReadBusy and bReadError THEN
			 eReadState :=READ_ERROR;
		 END_IF
 
	READ_ERROR:
		bReadError := TRUE;
		bReadExecute:= FALSE;
		eReadState := INIT_READ;
		
	FINISH_READ:
		M_Read := TRUE;
		bReadExecute:=FALSE;     
		eReadState:=INIT_READ;
		
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Status" Id="{f12f8f88-73da-452a-b294-129525da9447}">
      <Declaration><![CDATA[METHOD M_Status : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_WriteSingleRegister" Id="{2b93cb84-613b-4fbd-8e87-a3d09828f178}">
      <Declaration><![CDATA[METHOD M_WriteSingleRegister : BOOL
VAR_INPUT
END_VAR

VAR
	nModbusWriteDriveCommand: BYTE;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Write to a single Modbus Register

CASE eWriteState OF
			
	INIT_WRITE:
		IF bWriteExecute THEN
			bWriteError := FALSE;
			M_WriteSingleRegister := FALSE;
			fbModbusMasterEL.WriteSingleRegister(Execute:=FALSE);
			eWriteState:=WRITE;
		END_IF
	
	WRITE:
		fbModbusMasterEL.WriteSingleRegister(   
                                                UnitID:=nModbusStationAddress,
                                                Quantity:=nWriteQuantity,
                                                MBAddr:=nModbusWriteDataAddress,
                                                cbLength:=SIZEOF(nModbusWriteData),
                                                pMemoryAddr:=ADR(nModbusWriteData),
                                                Execute:=bWriteExecute,
                                                Timeout:=T#300MS,
												Busy=> bWriteBusy,
												Error=> bWriteError,
												ErrorId=> eWriteErrorID);

		 IF bWriteBusy AND NOT bWriteError THEN
		 	IF NOT bWriteBusy THEN                      
		 		eWriteState:=FINISH_WRITE;
			END_IF
		 ELSIF bWriteBusy AND bWriteError THEN
			 eWriteState :=WRITE_ERROR;
		 END_IF
 
	WRITE_ERROR:
		bWriteError := TRUE;
		bWriteExecute:= FALSE;
		eWriteState := INIT_WRITE;
		
	FINISH_WRITE:
		M_WriteSingleRegister := TRUE;
		bWriteExecute :=FALSE;     
		eWriteState :=INIT_WRITE;
		
END_CASE]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_ModbusRTU_SerialComms">
      <LineId Id="17" Count="0" />
      <LineId Id="19" Count="1" />
      <LineId Id="9" Count="0" />
      <LineId Id="220" Count="1" />
      <LineId Id="16" Count="0" />
      <LineId Id="222" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="31" Count="35" />
      <LineId Id="29" Count="1" />
      <LineId Id="28" Count="0" />
    </LineIds>
    <LineIds Name="FB_ModbusRTU_SerialComms.M_Read">
      <LineId Id="84" Count="1" />
      <LineId Id="9" Count="2" />
      <LineId Id="71" Count="0" />
      <LineId Id="78" Count="0" />
      <LineId Id="76" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="72" Count="0" />
      <LineId Id="15" Count="1" />
      <LineId Id="19" Count="14" />
      <LineId Id="73" Count="2" />
      <LineId Id="34" Count="0" />
      <LineId Id="82" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="80" Count="1" />
      <LineId Id="79" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="77" Count="0" />
      <LineId Id="63" Count="1" />
      <LineId Id="83" Count="0" />
      <LineId Id="65" Count="0" />
    </LineIds>
    <LineIds Name="FB_ModbusRTU_SerialComms.M_Status">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_ModbusRTU_SerialComms.M_WriteSingleRegister">
      <LineId Id="73" Count="1" />
      <LineId Id="16" Count="0" />
      <LineId Id="22" Count="9" />
      <LineId Id="63" Count="6" />
      <LineId Id="62" Count="0" />
      <LineId Id="70" Count="2" />
      <LineId Id="43" Count="18" />
      <LineId Id="20" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>