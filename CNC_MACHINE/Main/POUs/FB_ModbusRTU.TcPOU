<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.3">
  <POU Name="FB_ModbusRTU" Id="{d33eb993-f1a5-484e-9d4d-ae7861108719}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_ModbusRTU
VAR_INPUT
	

END_VAR
VAR_OUTPUT
END_VAR
VAR
    
 ModbusMaster   :   ModbusRtuMaster_PcCOM; 
 bExecute       : BOOL;
 bBusy          : BOOL;
 bError         : BOOL;
 nBytesRead         : UINT;
 nModbusRegister      : ARRAY [1..24] OF WORD;
 eError         : MODBUS_ERRORS;
   
// WriteModbusMaster  :   ModbusRtuMaster_PcCOM;

 bWriteExecute  : BOOL;
(* bWriteBusy     : BOOL;
 bWriteError    : BOOL; *)

 //eWriteError    : MODBUS_ERRORS;
 
 stSpindleIO	: ST_SpindleFunctions;
	
// Drive Control Command

bStop				: BOOL;
bRunEnable			: BOOL;
bDecelRamp1			: BOOL;
bDecelRamp2			: BOOL;
bFaultReset			: BOOL;
bCoastStopRequest	: BOOL;

// SpeedRef
rSpeedRefSetpoint	: REAL;
//Accel/Decel Time
rAccel_Decel		: REAL;

// Spindle Status

nErrorCode              : BYTE;
bDriveStopped           : BOOL;
bDriveRunning           : BOOL;
bDriveTripped           : BOOL;
rOutputFrequency        : REAL;
rOutputCurrent			: REAL;
nDigitalInputSts		: WORD;
nAnalogInput1			: WORD;
nAnalogInput2			: WORD;
rSpeedRefValue			: REAL;
rDCBusVoltage			: REAL;
rDriveTemp				: REAL;


END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[SpindleControlMapping();
ModbusMapping();

// Read/Write Modbus commands through PC COM Serial Port
    ModbusMaster(
                        UnitID:= 1, 
                        Quantity:= 24,
                        MBAddr:= 1, 
                        cbLength:= SIZEOF(nModbusRegister) , 
                        pMemoryAddr:= ADR(nModbusRegister), 
                        Execute:= (bExecute AND NOT bWriteExecute) OR (bWriteExecute AND NOT bExecute), 
                        Timeout:= T#5S, 
                        BUSY=> bBusy, 
                        Error=> bError, 
                        ErrorId=> eError , 
                        cbRead=> nBytesRead);
                        
(*    WriteModbusMaster(
                        UnitID:= 1, 
                        Quantity:= 4, 
                        MBAddr:= 1, 
                        cbLength:= SIZEOF(nModbusRegister) , 
                        pMemoryAddr:= ADR(nModbusRegister), 
                        Execute:= bWriteExecute AND NOT bReadExecute, 
                        Timeout:= T#5S, 
                        BUSY=> bWriteBusy, 
                        Error=> bWriteError, 
                        ErrorId=> eWriteError, 
                        cbRead=> );   *)
                     
IF  bExecute THEN                          
                                                       
    ModbusMaster.ReadRegs();
  
END_IF

IF bWriteExecute THEN   
              
    ModbusMaster.WriteRegs();
  
END_IF                  

// insert text here]]></ST>
    </Implementation>
    <Method Name="ModbusMapping" Id="{83d865f8-d7ae-49d7-a6f4-fcb7ec40a615}">
      <Declaration><![CDATA[METHOD ModbusMapping : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF bExecute THEN

    stSpindleIO.ReadDriveControlCommand	:= nModbusRegister[1];
    stSpindleIO.ReadSpeedRefSetpoint	:= WORD_TO_REAL(nModbusRegister[2]);
    stSpindleIO.ReadAccel_Decel			:= WORD_TO_REAL(nModbusRegister[4]);

ELSIF bWriteExecute THEN
    
    nModbusRegister[1]                  := stSpindleIO.SetDriveControlCommand;
    nModbusRegister[2]                  :=  REAL_TO_WORD(stSpindleIO.SetSpeedRefSetpoint);
    nModbusRegister[4]                  := REAL_TO_WORD(stSpindleIO.SetAccel_Decel);

END_IF


stSpindleIO.ErrorCode.0			:=  nModbusRegister[6].0;
stSpindleIO.ErrorCode.1			:=  nModbusRegister[6].1;
stSpindleIO.ErrorCode.2			:=  nModbusRegister[6].2;
stSpindleIO.ErrorCode.3			:=  nModbusRegister[6].3;
stSpindleIO.ErrorCode.4			:=  nModbusRegister[6].4;
stSpindleIO.ErrorCode.5			:=  nModbusRegister[6].5;
stSpindleIO.ErrorCode.6			:=  nModbusRegister[6].6;
stSpindleIO.ErrorCode.7			:=  nModbusRegister[6].7;	            //	: BYTE;

stSpindleIO.DriveStatus.0		:= nModbusRegister[6].8; 	            //	: BYTE;
stSpindleIO.DriveStatus.1		:= nModbusRegister[6].9; 	            //	: BYTE;
stSpindleIO.DriveStatus.2		:= nModbusRegister[6].10; 	            //	: BYTE;
stSpindleIO.DriveStatus.3		:= nModbusRegister[6].11; 	            //	: BYTE;
stSpindleIO.DriveStatus.4		:= nModbusRegister[6].12; 	            //	: BYTE;
stSpindleIO.DriveStatus.5		:= nModbusRegister[6].13; 	            //	: BYTE;
stSpindleIO.DriveStatus.6		:= nModbusRegister[6].14; 	            //	: BYTE;
stSpindleIO.DriveStatus.7		:= nModbusRegister[6].15; 	            //	: BYTE;

stSpindleIO.OutputFreq			:= WORD_TO_REAL(nModbusRegister[7]);	//	: REAL;
stSpindleIO.OutputCurrent		:= WORD_TO_REAL(nModbusRegister[8]);	//	: REAL;
stSpindleIO.DigitalInputSts		:= nModbusRegister[11];	                //	: INT;
stSpindleIO.AnalogIn1			:= nModbusRegister[20];	                //	: INT;
stSpindleIO.AnalogIn2			:= nModbusRegister[21];	                //	: INT;
stSpindleIO.SpeedRefValue		:= WORD_TO_REAL(nModbusRegister[22]);	//	: REAL;
stSpindleIO.DCBusVoltage		:= WORD_TO_REAL(nModbusRegister[23]);	//	: REAL;
stSpindleIO.DriveTemp			:= WORD_TO_REAL(nModbusRegister[24]);	//	: REAL;]]></ST>
      </Implementation>
    </Method>
    <Method Name="SpindleControlMapping" Id="{2f07773b-6003-410f-852f-7cd237e180e1}">
      <Declaration><![CDATA[METHOD SpindleControlMapping : BOOL
VAR_INPUT

END_VAR

VAR
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Read/Write Bits

// Stop/Run Enable

IF bStop THEN

	stSpindleIO.ReadDriveControlCommand.0 := FALSE;
	
ELSIF bRunEnable THEN
		
	stSpindleIO.ReadDriveControlCommand.0 := TRUE;

END_IF

// Decel Ramps

IF bDecelRamp1 THEN
	
	stSpindleIO.ReadDriveControlCommand.1 := FALSE;

ELSIF bDecelRamp2 THEN
	
	stSpindleIO.ReadDriveControlCommand.1 := TRUE;
	
END_IF;


stSpindleIO.ReadDriveControlCommand.2 := bFaultReset;
stSpindleIO.ReadDriveControlCommand.2 := bCoastStopRequest;

stSpindleIO.ReadSpeedRefSetpoint := rSpeedRefSetpoint;
stSpindleIO.ReadAccel_Decel:= rAccel_Decel;

// Read Only Bits

nErrorCode :=    stSpindleIO.ErrorCode;
bDriveStopped	:= stSpindleIO.DriveStatus.0;
bDriveRunning	:= stSpindleIO.DriveStatus.1;
bDriveTripped	:= stSpindleIO.DriveStatus.2;

rOutputFrequency	:= stSpindleIO.OutputFreq;
rOutputCurrent		:= stSpindleIO.OutputCurrent;
nDigitalInputSts	:= stSpindleIO.DigitalInputSts;
nAnalogInput1		:= stSpindleIO.AnalogIn1;
nAnalogInput2		:= stSpindleIO.AnalogIn2;
rSpeedRefValue		:= stSpindleIO.SpeedRefValue;
rDCBusVoltage		:= stSpindleIO.DCBusVoltage;
rDriveTemp			:= stSpindleIO.DriveTemp;




]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_ModbusRTU">
      <LineId Id="763" Count="40" />
      <LineId Id="862" Count="0" />
      <LineId Id="31" Count="0" />
    </LineIds>
    <LineIds Name="FB_ModbusRTU.ModbusMapping">
      <LineId Id="38" Count="1" />
      <LineId Id="6" Count="2" />
      <LineId Id="43" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="21" Count="6" />
      <LineId Id="18" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="29" Count="1" />
      <LineId Id="35" Count="0" />
      <LineId Id="31" Count="2" />
      <LineId Id="36" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="11" Count="6" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_ModbusRTU.SpindleControlMapping">
      <LineId Id="146" Count="1" />
      <LineId Id="76" Count="1" />
      <LineId Id="68" Count="1" />
      <LineId Id="9" Count="0" />
      <LineId Id="70" Count="1" />
      <LineId Id="75" Count="0" />
      <LineId Id="72" Count="0" />
      <LineId Id="74" Count="0" />
      <LineId Id="73" Count="0" />
      <LineId Id="78" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="53" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="64" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="62" Count="1" />
      <LineId Id="55" Count="1" />
      <LineId Id="79" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="50" Count="1" />
      <LineId Id="81" Count="0" />
      <LineId Id="80" Count="0" />
      <LineId Id="82" Count="0" />
      <LineId Id="145" Count="0" />
      <LineId Id="144" Count="0" />
      <LineId Id="85" Count="0" />
      <LineId Id="84" Count="0" />
      <LineId Id="86" Count="0" />
      <LineId Id="91" Count="1" />
      <LineId Id="94" Count="0" />
      <LineId Id="93" Count="0" />
      <LineId Id="96" Count="1" />
      <LineId Id="102" Count="4" />
      <LineId Id="95" Count="0" />
      <LineId Id="88" Count="0" />
      <LineId Id="87" Count="0" />
      <LineId Id="83" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>