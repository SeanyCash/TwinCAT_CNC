<div id="PathVisualization" data-tchmi-type="TcHmi.Controls.System.TcHmiContent" data-tchmi-top="0" data-tchmi-left="0" data-tchmi-width="1055" data-tchmi-height="508" data-tchmi-left-unit="px" data-tchmi-top-unit="px" data-tchmi-right-unit="px" data-tchmi-bottom-unit="px" data-tchmi-width-unit="px" data-tchmi-height-unit="px" data-tchmi-background-image-width-unit="px" data-tchmi-background-image-height-unit="px">

<script data-tchmi-target-attribute="data-tchmi-trigger" type="application/json">
[
  {
    "event": "PathVisualization.onAttached",
    "actions": [
      {
        "objectType": "JavaScript",
        "active": true,
        "sourceLines": [
          "/**",
          "\n * User: hudbrog (hudbrog@gmail.com)",
          "\n * Date: 10/21/12",
          "\n * Time: 7:45 AM",
          "\n */",
          "\n",
          "\nvar GCODE = {};",
          "\n",
          "\nGCODE.ui = (function(){",
          "\n    var reader;",
          "\n    var myCodeMirror;",
          "\n    var sliderVer;",
          "\n    var sliderHor;",
          "\n    var gCodeLines = {first: 0, last: 0};",
          "\n    var showGCode = false;",
          "\n    var displayType = {speed: 1, expermm: 2, volpersec: 3};",
          "\n//    var worker;",
          "\n",
          "\n    var setProgress = function(id, progress){",
          "\n        $('#'+id).width(parseInt(progress)+'%').text(parseInt(progress)+'%');",
          "\n//        $('#'+id);",
          "\n    };",
          "\n",
          "\n    var chooseAccordion = function(id){",
          "\n//        debugger;",
          "\n        $('#'+id).collapse(\"show\");",
          "\n    };",
          "\n",
          "\n    var setLinesColor = function(toggle){",
          "\n        for(var i=gCodeLines.first;i<gCodeLines.last; i++){",
          "\n            if(toggle){",
          "\n                myCodeMirror.setLineClass(Number(i), null, \"activeline\");",
          "\n            }else{",
          "\n                myCodeMirror.setLineClass(Number(i), null, null);",
          "\n            }",
          "\n        }",
          "\n    };",
          "\n",
          "\n    var prepareSpeedsInfo = function(layerNum){",
          "\n        var z = GCODE.renderer.getZ(layerNum);",
          "\n        var layerSpeeds = GCODE.gCodeReader.getModelInfo().speedsByLayer;",
          "\n        var max = GCODE.gCodeReader.getModelInfo().max;",
          "\n        var min = GCODE.gCodeReader.getModelInfo().min;",
          "\n        var renderOptions = GCODE.renderer.getOptions();",
          "\n        var speedIndex = 0;",
          "\n        var output = [];",
          "\n        var sortMe = {};",
          "\n        var sortKeys = [];",
          "\n        var i;",
          "\n        var spd;",
          "\n        var scale;",
          "\n",
          "\n        output.push(\"Extrude speeds:\");",
          "\n        for(i=0;i<layerSpeeds['extrude'][z].length;i++){",
          "\n            if(typeof(layerSpeeds['extrude'][z][i])==='undefined'){continue;}",
          "\n            spd = parseFloat(layerSpeeds['extrude'][z][i]);",
          "\n            scale = (spd - min.speed)/(max.speed-min.speed);",
          "\n            spd = (spd/60).toFixed(2);",
          "\n            sortMe[spd] = \"<div id='colorBox\"+i+\"' class='colorBox' style='background-color: \"+ GCODE.renderer.getGradientColor(scale) + \"'></div>  = \" + spd+\"mm/s\";",
          "\n        }",
          "\n        sortKeys = Object.keys(sortMe).sort((a, b) => b - a);",
          "\n        for(i=0;i<sortKeys.length;i++) {",
          "\n            output.push(sortMe[sortKeys[i]]);",
          "\n        }",
          "\n",
          "\n        if(typeof(layerSpeeds['move'][z]) !== 'undefined'){",
          "\n            output.push(\"Move speeds:\");",
          "\n            for(i=0;i<layerSpeeds['move'][z].length;i++){",
          "\n                if(typeof(layerSpeeds['move'][z][i])==='undefined'){continue;}",
          "\n                spd = (parseFloat(layerSpeeds['move'][z][i])/60).toFixed(2);",
          "\n                sortMe[spd] = \"<div id='colorBox\"+i+\"' class='colorBox' style='background-color: \"+renderOptions['colorMove'] + \"'></div>  = \" + spd+\"mm/s\";",
          "\n            }",
          "\n        }",
          "\n        sortKeys = Object.keys(sortMe).sort((a, b) => b - a);",
          "\n        for(i=0;i<sortKeys.length;i++) {",
          "\n            output.push(sortMe[sortKeys[i]]);",
          "\n        }",
          "\n",
          "\n        if(typeof(layerSpeeds['retract'][z]) !== 'undefined'){",
          "\n            output.push(\"Retract speeds:\");",
          "\n            for(i=0;i<layerSpeeds['retract'][z].length;i++){",
          "\n                if(typeof(layerSpeeds['retract'][z][i])==='undefined'){continue;}",
          "\n                output.push(\"<span style='color: \" + renderOptions['colorRetract'] +\"'>&#9679;</span> <span style='color: \" + renderOptions['colorRestart'] +\"'>&#9679;</span> = \" +(parseFloat(layerSpeeds['retract'][z][i])/60).toFixed(2)+\"mm/s\");",
          "\n            }",
          "\n        }",
          "\n",
          "\n        return output;",
          "\n    }",
          "\n",
          "\n    var prepareExPerMMInfo = function(layerNum){",
          "\n        var z = GCODE.renderer.getZ(layerNum);",
          "\n        var layerSpeeds = GCODE.gCodeReader.getModelInfo().volSpeedsByLayer;",
          "\n        var max = GCODE.gCodeReader.getModelInfo().max;",
          "\n        var min = GCODE.gCodeReader.getModelInfo().min;",
          "\n        var output = [];",
          "\n        var sortMe = {};",
          "\n        var sortKeys = [];",
          "\n        var i;",
          "\n        var spd;",
          "\n        var scale;",
          "\n",
          "\n        output.push(\"Extrude speeds in extrusion mm per move mm:\");",
          "\n        for(i=0;i<layerSpeeds[z].length;i++){",
          "\n            if(typeof(layerSpeeds[z][i])==='undefined'){continue;}",
          "\n            spd = parseFloat(layerSpeeds[z][i]);",
          "\n            scale = (spd - min.volSpeed)/(max.volSpeed-min.volSpeed);",
          "\n            spd = spd.toFixed(3);",
          "\n            sortMe[spd] = \"<div id='colorBox\"+i+\"' class='colorBox' style='background-color: \"+ GCODE.renderer.getGradientColor(scale) + \"'></div>  = \" + spd+\"mm/mm\";",
          "\n        }",
          "\n        sortKeys = Object.keys(sortMe).sort((a, b) => b - a);",
          "\n        for(i=0;i<sortKeys.length;i++) {",
          "\n            output.push(sortMe[sortKeys[i]]);",
          "\n        }",
          "\n",
          "\n        return output;",
          "\n    }",
          "\n",
          "\n    var prepareVolPerSecInfo = function(layerNum){",
          "\n        var z = GCODE.renderer.getZ(layerNum);",
          "\n        var layerSpeeds = GCODE.gCodeReader.getModelInfo().extrusionSpeedsByLayer;",
          "\n        var max = GCODE.gCodeReader.getModelInfo().max;",
          "\n        var min = GCODE.gCodeReader.getModelInfo().min;",
          "\n        var gCodeOptions = GCODE.gCodeReader.getOptions();",
          "\n        var output = [];",
          "\n        var sortMe = {};",
          "\n        var sortKeys = [];",
          "\n        var i;",
          "\n        var spd;",
          "\n        var scale",
          "\n",
          "\n        output.push(\"Extrude speeds in mm^3/sec:\");",
          "\n        for(i=0;i<layerSpeeds[z].length;i++){",
          "\n            if(typeof(layerSpeeds[z][i])==='undefined'){continue;}",
          "\n",
          "\n            spd = parseFloat(layerSpeeds[z][i]);",
          "\n            scale = (spd - min.extrSpeed)/(max.extrSpeed-min.extrSpeed);",
          "\n            if(!gCodeOptions.volumetricE) {",
          "\n                spd *= Math.PI * Math.pow(gCodeOptions.filamentDia / 2, 2);",
          "\n            }",
          "\n            spd = spd.toFixed(1);",
          "\n            sortMe[spd] = \"<div id='colorBox\"+i+\"' class='colorBox' style='background-color: \" + GCODE.renderer.getGradientColor(scale) + \"'></div>  = \" + spd +\"mm^3/sec\";",
          "\n        }",
          "\n        sortKeys = Object.keys(sortMe).sort((a, b) => b - a);",
          "\n        for(i=0;i<sortKeys.length;i++) {",
          "\n            output.push(sortMe[sortKeys[i]]);",
          "\n        }",
          "\n",
          "\n        return output;",
          "\n    }",
          "\n",
          "\n",
          "\n    var printLayerInfo = function(layerNum){",
          "\n        var z = GCODE.renderer.getZ(layerNum);",
          "\n        var segments = GCODE.renderer.getLayerNumSegments(layerNum);",
          "\n        var renderOptions = GCODE.renderer.getOptions();",
          "\n        var filament = GCODE.gCodeReader.getLayerFilament(z);",
          "\n        var output = [];",
          "\n",
          "\n        var aggFilamentUsed = 0.0;",
          "\n        for (var x = 0; x <= layerNum; x++) {",
          "\n          layerFilament = GCODE.gCodeReader.getLayerFilament(GCODE.renderer.getZ(x))",
          "\n          if (layerFilament) {",
          "\n            aggFilamentUsed += parseFloat(layerFilament.toFixed(2));",
          "\n          }",
          "\n        }",
          "\n        aggFilamentUsed = aggFilamentUsed.toFixed(2)",
          "\n",
          "\n        output.push(\"Layer number: \" + layerNum);",
          "\n        output.push(\"Layer height (mm): \" + z);",
          "\n        output.push(\"GCODE commands in layer: \" + segments);",
          "\n        output.push(\"Filament used by layer (mm): \" + filament.toFixed(2));",
          "\n        output.push(\"Filament used, summed (mm): \" + aggFilamentUsed);",
          "\n        output.push(\"Print time for layer: \" + parseFloat(GCODE.gCodeReader.getModelInfo().printTimeByLayer[z]).toFixed(1) + \"sec\");",
          "\n",
          "\n        if(renderOptions['speedDisplayType'] === displayType.speed){",
          "\n            var res = prepareSpeedsInfo(layerNum);",
          "\n            output = output.concat(res);",
          "\n        }else if(renderOptions['speedDisplayType'] === displayType.expermm){",
          "\n            var res = prepareExPerMMInfo(layerNum);",
          "\n            output = output.concat(res);",
          "\n        }else if(renderOptions['speedDisplayType'] === displayType.volpersec){",
          "\n            var res = prepareVolPerSecInfo(layerNum);",
          "\n            output = output.concat(res);",
          "\n        }",
          "\n",
          "\n        $('#layerInfo').html(output.join('<br>'));",
          "\n//        chooseAccordion('layerAccordionTab');",
          "\n    };",
          "\n",
          "\n    var printModelInfo = function(){",
          "\n        var resultSet = [];",
          "\n        var modelInfo = GCODE.gCodeReader.getModelInfo();",
          "\n        var gCodeOptions = GCODE.gCodeReader.getOptions();",
          "\n",
          "\n\t\tlet totalFilament = modelInfo.totalFilament;",
          "\n\t\tlet totalWeight = modelInfo.totalWeight;",
          "\n\t\tlet filamentByExtruder = modelInfo.filamentByExtruder;",
          "\n\t\tif(gCodeOptions.volumetricE) {",
          "\n\t\t\tlet fCrossSection = Math.PI * Math.pow(gCodeOptions.filamentDia / 2.0, 2);",
          "\n\t\t\ttotalFilament /= fCrossSection;",
          "\n\t\t\ttotalWeight /= fCrossSection;",
          "\n\t\t\tfor(let k in filamentByExtruder) filamentByExtruder[k] /= fCrossSection;",
          "\n\t\t}",
          "\n",
          "\n        resultSet.push(\"Model size is: \" + modelInfo.modelSize.x.toFixed(2) + 'x' + modelInfo.modelSize.y.toFixed(2) + 'x' + modelInfo.modelSize.z.toFixed(2)+'mm<br>');",
          "\n        resultSet.push(\"Total filament used: \" + totalFilament.toFixed(2) + \"mm<br>\");",
          "\n        resultSet.push(\"Total filament weight used: \" + totalWeight.toFixed(2) + \"grams<br>\");",
          "\n        var i = 0, tmp = [];",
          "\n        for(var key in modelInfo.filamentByExtruder){",
          "\n            i++;",
          "\n            tmp.push(\"Filament for extruder '\" + key + \"': \" + filamentByExtruder[key].toFixed(2) + \"mm<br>\");",
          "\n        }",
          "\n        if(i>1){",
          "\n            resultSet.push(tmp.join(''));",
          "\n        }",
          "\n        resultSet.push(\"Estimated print time: \" + parseInt(parseFloat(modelInfo.printTime)/60/60) + \":\" + parseInt((parseFloat(modelInfo.printTime)/60)%60) + \":\" + parseInt(parseFloat(modelInfo.printTime)%60) + \"<br>\");",
          "\n        resultSet.push(\"Estimated layer height: \" + modelInfo.layerHeight.toFixed(2) + \"mm<br>\");",
          "\n        resultSet.push(\"Layer count: \" + modelInfo.layerCnt.toFixed(0) + \"printed, \" + modelInfo.layerTotal.toFixed(0) + 'visited<br>');",
          "\n        resultSet.push(\"Time cost: \" + (modelInfo.printTime*gCodeOptions.hourlyCost/60/60).toFixed(2) + '<br>');",
          "\n        resultSet.push(\"Filament cost: \" + (totalWeight*gCodeOptions.filamentPrice).toFixed(2) + '<br>');",
          "\n",
          "\n        document.getElementById('list').innerHTML =  resultSet.join('');",
          "\n    };",
          "\n",
          "\n    var handleFileSelect = function(evt) {",
          "\n//        console.log(\"handleFileSelect\");",
          "\n        evt.stopPropagation();",
          "\n        evt.preventDefault();",
          "\n",
          "\n        var files = evt.dataTransfer?evt.dataTransfer.files:evt.target.files; // FileList object.",
          "\n",
          "\n        var output = [];",
          "\n        for (var i = 0, f; f = files[i]; i++) {",
          "\n            if(f.name.toLowerCase().match(/^.*\\.(?:gcode|g|txt|gco|gx)$/)){",
          "\n                output.push('<li>File extensions suggests GCODE</li>');",
          "\n            }else{",
          "\n                output.push('<li><strong>You should only upload *.gcode files! I will not work with this one!</strong></li>');",
          "\n                document.getElementById('errorList').innerHTML = '<ul>' + output.join('') + '</ul>';",
          "\n                return;",
          "\n            }",
          "\n",
          "\n            reader = new FileReader();",
          "\n            reader.onload = function(theFile){",
          "\n                chooseAccordion('progressAccordionTab');",
          "\n                setProgress('loadProgress', 0);",
          "\n                setProgress('analyzeProgress', 0);",
          "\n//                myCodeMirror.setValue(theFile.target.result);",
          "\n                GCODE.gCodeReader.loadFile(theFile);",
          "\n                if(showGCode){",
          "\n                    myCodeMirror.setValue(theFile.target.result);",
          "\n                }else{",
          "\n                    myCodeMirror.setValue(\"GCode view is disabled. You can enable it in 'GCode analyzer options' section.\")",
          "\n                }",
          "\n",
          "\n            };",
          "\n            reader.readAsText(f);",
          "\n        }",
          "\n    };",
          "\n",
          "\n    var handleDragOver = function(evt) {",
          "\n        evt.stopPropagation();",
          "\n        evt.preventDefault();",
          "\n        evt.target.dropEffect = 'copy'; // Explicitly show this is a copy.",
          "\n    };",
          "\n",
          "\n    var initSliders = function(){",
          "\n//        var prevX=0;",
          "\n//        var prevY=0;",
          "\n        var handle;",
          "\n        sliderVer =  $( \"#slider-vertical\" );",
          "\n        sliderHor = $( \"#slider-horizontal\" );",
          "\n",
          "\n        var onLayerChange = function(val){",
          "\n            var progress = GCODE.renderer.getLayerNumSegments(val)-1;",
          "\n            GCODE.renderer.render(val,0, progress);",
          "\n            sliderHor.slider({max: progress, values: [0,progress]});",
          "\n            setLinesColor(false); //clear current selection",
          "\n            gCodeLines = GCODE.gCodeReader.getGCodeLines(val, sliderHor.slider(\"values\",0), sliderHor.slider(\"values\",1));",
          "\n            setLinesColor(true); // highlight lines",
          "\n            printLayerInfo(val);",
          "\n        };",
          "\n",
          "\n        sliderVer.slider({",
          "\n            orientation: \"vertical\",",
          "\n            range: \"min\",",
          "\n            min: 0,",
          "\n            max: GCODE.renderer.getModelNumLayers()-1,",
          "\n            value: 0,",
          "\n            slide: function( event, ui ) {",
          "\n                onLayerChange(ui.value);",
          "\n            }",
          "\n        });",
          "\n",
          "\n        //this stops slider reacting to arrow keys, since we do it below manually",
          "\n        $( \"#slider-vertical\").find(\".ui-slider-handle\" ).unbind('keydown');",
          "\n",
          "\n        sliderHor.slider({",
          "\n            orientation: \"horizontal\",",
          "\n            range: \"min\",",
          "\n            min: 0,",
          "\n            max: GCODE.renderer.getLayerNumSegments(0)-1,",
          "\n            values: [0,GCODE.renderer.getLayerNumSegments(0)-1],",
          "\n            slide: function( event, ui ) {",
          "\n                setLinesColor(false); //clear current selection",
          "\n                gCodeLines = GCODE.gCodeReader.getGCodeLines(sliderVer.slider(\"value\"),ui.values[0], ui.values[1]);",
          "\n                setLinesColor(true); // highlight lines",
          "\n                GCODE.renderer.render(sliderVer.slider(\"value\"), ui.values[0], ui.values[1]);",
          "\n            }",
          "\n        });",
          "\n",
          "\n        window.onkeydown = function (event){",
          "\n            if(event.keyCode === 38 || event.keyCode === 33){",
          "\n                if(sliderVer.slider('value') < sliderVer.slider('option', 'max')){",
          "\n                    sliderVer.slider('value', sliderVer.slider('value')+1);",
          "\n                    onLayerChange(sliderVer.slider('value'));",
          "\n                }",
          "\n            }else if(event.keyCode === 40 || event.keyCode === 34){",
          "\n                if(sliderVer.slider('value') > 0){",
          "\n                    sliderVer.slider('value', sliderVer.slider('value')-1);",
          "\n                    onLayerChange(sliderVer.slider('value'));",
          "\n                }",
          "\n            }",
          "\n            event.stopPropagation()",
          "\n        }",
          "\n    };",
          "\n",
          "\n    var processMessage = function(e){",
          "\n        var data = e.data;",
          "\n        switch (data.cmd) {",
          "\n            case 'returnModel':",
          "\n                setProgress('loadProgress', 100);",
          "\n                GCODE.ui.worker.postMessage({",
          "\n                        \"cmd\":\"analyzeModel\",",
          "\n                        \"msg\":{",
          "\n                        }",
          "\n                    }",
          "\n                );",
          "\n                break;",
          "\n            case 'analyzeDone':",
          "\n//                var resultSet = [];",
          "\n",
          "\n                setProgress('analyzeProgress',100);",
          "\n                GCODE.gCodeReader.processAnalyzeModelDone(data.msg);",
          "\n                GCODE.gCodeReader.passDataToRenderer();",
          "\n                initSliders();",
          "\n                printModelInfo();",
          "\n                printLayerInfo(0);",
          "\n                chooseAccordion('infoAccordionTab');",
          "\n                GCODE.ui.updateOptions();",
          "\n                $('#myTab').find('a[href=\"#tab2d\"]').tab('show');",
          "\n                $('#runAnalysisButton').removeClass('disabled');",
          "\n                break;",
          "\n            case 'returnLayer':",
          "\n                GCODE.gCodeReader.processLayerFromWorker(data.msg);",
          "\n                setProgress('loadProgress',data.msg.progress);",
          "\n                break;",
          "\n            case 'returnMultiLayer':",
          "\n                GCODE.gCodeReader.processMultiLayerFromWorker(data.msg);",
          "\n                setProgress('loadProgress',data.msg.progress);",
          "\n                break;",
          "\n            case \"analyzeProgress\":",
          "\n                setProgress('analyzeProgress',data.msg.progress);",
          "\n                break;",
          "\n            default:",
          "\n                console.log(\"default msg received\" + data.cmd);",
          "\n        }",
          "\n    };",
          "\n",
          "\n    var checkCapabilities = function(){",
          "\n        var warnings = [];",
          "\n        var fatal = [];",
          "\n",
          "\n        Modernizr.addTest('filereader', function () {",
          "\n            return !!(window.File && window.FileList && window.FileReader);",
          "\n        });",
          "\n",
          "\n        if(!Modernizr.canvas)fatal.push(\"<li>Your browser doesn't seem to support HTML5 Canvas, this application won't work without it.</li>\");",
          "\n        if(!Modernizr.filereader)fatal.push(\"<li>Your browser doesn't seem to support HTML5 File API, this application won't work without it.</li>\");",
          "\n        if(!Modernizr.webworkers)fatal.push(\"<li>Your browser doesn't seem to support HTML5 Web Workers, this application won't work without it.</li>\");",
          "\n        if(!Modernizr.svg)fatal.push(\"<li>Your browser doesn't seem to support HTML5 SVG, this application won't work without it.</li>\");",
          "\n",
          "\n        if(fatal.length>0){",
          "\n            document.getElementById('errorList').innerHTML = '<ul>' + fatal.join('') + '</ul>';",
          "\n            console.log(\"Initialization failed: unsupported browser.\");",
          "\n            return false;",
          "\n        }",
          "\n",
          "\n        if(!Modernizr.webgl){",
          "\n            warnings.push(\"<li>Your browser doesn't seem to support HTML5 Web GL, 3d mode is not recommended, going to be SLOW!</li>\");",
          "\n            GCODE.renderer3d.setOption({rendererType: \"canvas\"});",
          "\n        }",
          "\n        if(!Modernizr.draganddrop)warnings.push(\"<li>Your browser doesn't seem to support HTML5 Drag'n'Drop, Drop area will not work.</li>\");",
          "\n",
          "\n        if(warnings.length>0){",
          "\n            document.getElementById('errorList').innerHTML = '<ul>' + warnings.join('') + '</ul>';",
          "\n            console.log(\"Initialization succeeded with warnings.\")",
          "\n        }",
          "\n        return true;",
          "\n    };",
          "\n",
          "\n",
          "\n    return {",
          "\n        worker: undefined,",
          "\n        initHandlers: function(){",
          "\n            var capabilitiesResult = checkCapabilities();",
          "\n            if(!capabilitiesResult){",
          "\n                return;",
          "\n            }",
          "\n            var dropZone = document.getElementById('drop_zone');",
          "\n            dropZone.addEventListener('dragover', handleDragOver, false);",
          "\n            dropZone.addEventListener('drop', handleFileSelect, false);",
          "\n",
          "\n            document.getElementById('file').addEventListener('change', handleFileSelect, false);",
          "\n",
          "\n            setProgress('loadProgress', 0);",
          "\n            setProgress('analyzeProgress', 0);",
          "\n",
          "\n            $(\".collapse\").collapse({parent: '#accordion2'});",
          "\n",
          "\n            $('#myTab').find('a[href=\"#tab3d\"]').click(function (e) {",
          "\n                e.preventDefault();",
          "\n                console.log(\"Switching to 3d mode\");",
          "\n                $(this).tab('show');",
          "\n                GCODE.renderer3d.doRender();",
          "\n            });",
          "\n",
          "\n            $('#myTab').find('a[href=\"#tabGCode\"]').click(function (e) {",
          "\n                e.preventDefault();",
          "\n                console.log(\"Switching to GCode preview mode\");",
          "\n                $(this).tab('show');",
          "\n                myCodeMirror.refresh();",
          "\n                console.log(gCodeLines);",
          "\n                myCodeMirror.setCursor(Number(gCodeLines.first),0);",
          "\n//                myCodeMirror.setSelection({line:Number(gCodeLines.first),ch:0},{line:Number(gCodeLines.last),ch:0});",
          "\n                myCodeMirror.focus();",
          "\n            });",
          "\n",
          "\n            this.worker = new Worker('js/Worker.js');",
          "\n",
          "\n            this.worker.addEventListener('message', processMessage, false);",
          "\n",
          "\n            GCODE.ui.processOptions();",
          "\n            GCODE.renderer.render(0,0);",
          "\n",
          "\n            console.log(\"Application initialized\");",
          "\n",
          "\n            myCodeMirror = new CodeMirror( document.getElementById('gCodeContainer'), {",
          "\n                lineNumbers: true,",
          "\n                gutters: ['CodeMirror-linenumbers']",
          "\n            });",
          "\n            myCodeMirror.setSize(\"680\",\"640\");",
          "\n//            console.log(myCodeMirror);",
          "\n            chooseAccordion('fileAccordionTab');",
          "\n",
          "\n            (function() {",
          "\n                var requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame ||",
          "\n                    window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;",
          "\n                window.requestAnimationFrame = requestAnimationFrame;",
          "\n            })();",
          "\n",
          "\n            if(window.location.search.match(/new/)){",
          "\n                $('#errAnalyseTab').removeClass('hide');",
          "\n            }",
          "\n",
          "\n        },",
          "\n",
          "\n        processOptions: function(){",
          "\n\t\t\tGCODE.gCodeReader.setOption({",
          "\n\t\t\t\tsortLayers: document.getElementById('sortLayersCheckbox').checked,",
          "\n\t\t\t\tpurgeEmptyLayers: document.getElementById('purgeEmptyLayersCheckbox').checked,",
          "\n\t\t\t\tvolumetricE: document.getElementById('volumetricE').checked,",
          "\n",
          "\n\t\t\t\tfilamentDia: Number($('#filamentDia').val()) || 1.75,",
          "\n\t\t\t\tnozzleDia: Number($('#nozzleDia').val()) || 0.4,",
          "\n\t\t\t\thourlyCost: Number($('#hourlyCost').val()) || 1.0,",
          "\n\t\t\t\tfilamentPrice: Number($('#filamentPrice').val()) || 0.05,",
          "\n",
          "\n\t\t\t\tfilamentType: document.getElementById('plasticABS').checked ? 'ABS' : 'PLA',",
          "\n\t\t\t});",
          "\n",
          "\n\t\t\tGCODE.renderer.setOption({",
          "\n\t\t\t\tmoveModel: document.getElementById('moveModelCheckbox').checked,",
          "\n\t\t\t\tshowMoves: document.getElementById('showMovesCheckbox').checked,",
          "\n\t\t\t\tshowRetracts: document.getElementById('showRetractsCheckbox').checked,",
          "\n\t\t\t\tdifferentiateColors: document.getElementById('differentiateColorsCheckbox').checked,",
          "\n\t\t\t\tactualWidth: document.getElementById('thickExtrusionCheckbox').checked,",
          "\n\t\t\t\talpha: document.getElementById('alphaCheckbox').checked,",
          "\n\t\t\t\tshowNextLayer: document.getElementById('showNextLayer').checked,",
          "\n\t\t\t});",
          "\n",
          "\n            showGCode = document.getElementById('showGCodeCheckbox').checked;",
          "\n",
          "\n            if(document.getElementById('renderErrors').checked){",
          "\n                GCODE.renderer.setOption({",
          "\n\t\t\t\t\tshowMoves: false,",
          "\n\t\t\t\t\tshowRetracts: false,",
          "\n\t\t\t\t\trenderAnalysis: true,",
          "\n\t\t\t\t\tactualWidth: true,",
          "\n\t\t\t\t});",
          "\n            }",
          "\n            else GCODE.renderer.setOption({renderAnalysis: false});",
          "\n",
          "\n            if(document.getElementById('speedDisplayRadio').checked)GCODE.renderer.setOption({speedDisplayType: displayType.speed});",
          "\n            if(document.getElementById('exPerMMRadio').checked)GCODE.renderer.setOption({speedDisplayType: displayType.expermm});",
          "\n            if(document.getElementById('volPerSecRadio').checked)GCODE.renderer.setOption({speedDisplayType: displayType.volpersec});",
          "\n            if(GCODE.gCodeReader.getModelInfo().layerTotal > 0){",
          "\n                printModelInfo();",
          "\n                printLayerInfo($( \"#slider-vertical\" ).slider(\"value\"));",
          "\n            }",
          "\n        },",
          "\n",
          "\n        updateOptions: function(){",
          "\n            var gcodeOptions = GCODE.gCodeReader.getOptions();",
          "\n",
          "\n            document.getElementById('nozzleDia').value = gcodeOptions['nozzleDia'];",
          "\n            document.getElementById('filamentDia').value = gcodeOptions['filamentDia'];",
          "\n        },",
          "\n",
          "\n        resetSliders: function(){",
          "\n            initSliders();",
          "\n        },",
          "\n",
          "\n        setOption: function(options){",
          "\n            for(var opt in options){",
          "\n                uiOptions[opt] = options[opt];",
          "\n            }",
          "\n        }",
          "\n    }",
          "\n}());",
          "\n"
        ],
        "injectContextObject": false,
        "asyncWait": true,
        "waitMode": "Synchronous"
      }
    ]
  }
]
</script>
</div>